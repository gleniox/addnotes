import React, { useState, useEffect } from "react";
import ReactDOM from "react-dom";

const NoteApp = () => {
  const [notes, setNotes] = useState([]);
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");

  const addNote = (e) => {
    e.preventDefault();
    setNotes([...notes, { title, content }]);
    setTitle("");
    setContent("");
  };

  const removeNote = (title) => {
    setNotes(notes.filter((note) => note.title !== title));
  };

  useEffect(() => {
    const notesData = JSON.parse(localStorage.getItem("notes"));

    if (notesData) {
      setNotes(notesData);
    }
  }, []); //[] works like class method didmount

  useEffect(() => {
    localStorage.setItem("notes", JSON.stringify(notes));
    // console.log("useEffect ran");
  }, [notes]);

  return (
    <div>
      <h1>Notes</h1>
      <p>Add Note</p>
      <form onSubmit={addNote}>
        Title:{" "}
        <input value={title} onChange={(e) => setTitle(e.target.value)} />
        Text:{" "}
        <textarea
          value={content}
          onChange={(e) => setContent(e.target.value)}
        />
        <button>add note</button>
      </form>
      {notes.map((note) => (
        <Note key={note.title} note={note} removeNote={removeNote} />
      ))}
    </div>
  );
};

const Note = ({ note, removeNote }) => {
  useEffect(() => {
    console.log("Setting up effect!");
    return () => {
      console.log("Cleaning up effect!"); //cleaning-up works like class method didunmount
    };
  }, []);

  return (
    <div>
      <h3>{note.title}</h3>
      <p>{note.content}</p>
      <button onClick={() => removeNote(note.title)}>x</button>
    </div>
  );
};

// const App = (props) => {
//   const [count, setCount] = useState(props.count);
//   const [text, setText] = useState("");

//   useEffect(() => {
//     console.log("This should only run once!");
//   }, []); // depends on nothing to run; run once. it works like method didmount behavior

//   useEffect(() => {
//     console.log("useEffect ran");
//     document.title = count;
//   }, [count]); // depends on count to run

//   const increment = () => {
//     setCount(count + 1);
//   };

//   const decrement = () => {
//     setCount(count - 1);
//   };

//   const reset = () => {
//     setCount(props.count);
//   };

//   return (
//     <div>
//       <p>
//         The current {text || "count"} is {count}
//       </p>
//       <button onClick={decrement}>-1</button>
//       <button onClick={increment}>+1</button>
//       <button onClick={reset}>Reset</button>
//       <input value={text} onChange={(e) => setText(e.target.value)} />
//     </div>
//   );
// };

ReactDOM.render(<NoteApp />, document.getElementById("root"));
